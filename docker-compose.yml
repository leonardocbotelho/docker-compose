version: '3.9'

volumes:
  rabbitmq_data:
  mysql_data:
  postgres_data:
  

services:
  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq-development
    image: rabbitmq:3-management-alpine
    volumes:
      - 'rabbitmq_data:/var/lib/rabbitmq'
    environment:
      RABBITMQ_DEFAULT_USER: 'guest'
      RABBITMQ_DEFAULT_PASS: 'guest'
      RABBITMQ_DEFAULT_VHOST: '/'
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - local

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'
    ports:
      - '2181:2181'
    networks:
      - local

  kafka_broker:
    container_name: kafka_broker
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: '0'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://host.docker.internal:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_JMX_PORT: '9091'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
    ports:
      - '9092:9092'
    depends_on:
      - zookeeper
    links:
      - zookeeper     
    networks:
      - local

  ksqldb-server:
    container_name: ksqldb-server
    image: confluentinc/ksqldb-server:latest
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka_broker:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
    healthcheck:
      test: curl -f http://ksqldb-server:8088/ || exit 1
    ports:
      - "8088:8088"
    depends_on:
      - kafka_broker
    networks:
      - local
      
  ksqldb-cli:
    container_name: ksqldb-cli
    image: confluentinc/ksqldb-cli:latest
    depends_on:
      - kafka_broker
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
      - local

  akhq_local:
    container_name: akhq_local
    image: tchiotludo/akhq:latest
    environment:
      AKHQ_CONFIGURATION: |
        micronaut:
          security:
            enabled: false
            ldap:
              default:
                enabled: false
        
        akhq:
          connections:
            development:
              properties:
                bootstrap.servers: kafka_broker:9092
    ports:
      - 9000:8080
    depends_on:
      - kafka_broker
    links:
      - kafka_broker
    networks:
      - local

  kowl_local:
    container_name: kowl_local
    image: quay.io/cloudhut/kowl:master
    environment:
      KAFKA_BROKERS: 'kafka_broker:9092'
    ports:
      - 9100:8080
    depends_on:
      - kafka_broker
    links:
      - kafka_broker
    networks:
      - local

  mysql:
    container_name: mysql
    image: mysql/mysql-server:latest
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: 'abcd1234'

  postgres:
    container_name: postgres
    restart: always
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql
    environment:
      POSTGRES_PASSWORD: postgres


networks:
  local:
    driver: bridge